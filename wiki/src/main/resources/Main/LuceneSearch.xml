<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>Main</web>
<name>LuceneSearch</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Main.WebSearch</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1186588178000</creationDate>
<date>1233322267000</date>
<contentUpdateDate>1233322267000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Main.LuceneSearch</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>3bc74fac-9e22-46d3-9faf-63db47678fa3</guid>
<property>
<tags/>
</property>
</object>
<content>## ===================
## Lucene search
## ===================
## Inputs : $request.text
## Outputs : $list, $isScored
## ===================
## Uncomment this line to overload the maximum list of wiki where to search (also the one listed in the wikis combobox)
## #set($allwikinamelist = ["xwiki", "wiki1", "wiki2"])
##
## Uncomment this line to overload the wikis where to search
## #set($wikinames = "xwiki,wiki,wiki")
##
{pre}
#set ($displayUI = true)
#if ("$!request.xpage" == 'rdf')
  #set ($displayUI = false)
#end
## ---------------
## Title
## ---------------
#if ($displayUI)
{/pre}
1 $msg.get("search")
{pre}
#end
## ---------------
## Space filtering
## ---------------
#if("$!request.space" != '')
  #set($space = $request.space)
  #set($reqspace = " AND web:${space}")
#else
  #set($space = "")
#end
#set($spacesText = {})
#set($spaces = $xwiki.spaces)
#set($ok = $spacesText.put("All",""))
#foreach($space in $spaces)
  #set($ok = $spacesText.put($space,$space))
#end
## ---------------
## Space macros
## ---------------
#macro(spaceoption $space $selectspace $spacesText)
  &lt;option value="$spacesText.get($space)" #if($selectspace == $spacesText.get($space))selected="selected"#end&gt;$space&lt;/option&gt;
#end
#macro(spaceselect $selectspace $spaces $spacesText)
  &lt;select name="space"&gt;
    #spaceoption("All" $selectspace $spacesText)
    #foreach($space in $spaces)
      #spaceoption($space $selectspace $spacesText)
    #end
  &lt;/select&gt;
#end
## ---------------
## Wikis filtering
## ---------------
#set($wikinamelist = [])
#if(!$wikinames)
  #set($wikinametable = $request.getParameterValues("wikinames"))
  #if(!$wikinametable || $request.wikinames == "")
    #set($wikinametable = $allwikinamelist)
  #end
  #set($wikinames = "")
  #foreach($wikiname in $wikinametable)
    #set($ok = $wikinamelist.add($wikiname))
    #if($wikinames != "")
      #set($wikinames = $wikinames + ",")
    #end
    #set($wikinames = $wikinames + $wikiname)
  #end
#else
  #set($wikinametable = $wikinames.split(", "))
  #foreach($wikiname in $wikinametable)
    #set($ok = $wikinamelist.add($wikiname))
  #end
#end
##
#if($xwiki.isVirtualMode())
  #if(!$allwikinamelist)
    #set($currentwikiname = $context.database)
    #set($ok = $context.setDatabase($context.mainWikiName))
    #set($allwikilist = $xwiki.searchDocuments(", BaseObject as obj, StringProperty as prop where doc.fullName=obj.name and obj.className='XWiki.XWikiServerClass' and prop.id.id=obj.id and prop.id.name='server'"))
    #set($ok = $context.setDatabase($currentwikiname))
    ##
    #set($allwikinamelist = [])
    #foreach($wiki in $allwikilist)
      #set($ok = $allwikinamelist.add($wiki.substring(17).toLowerCase()))
    #end
    #if(!$allwikinamelist.contains($context.mainWikiName))
      #set($ok = $allwikinamelist.add($context.mainWikiName))
    #end
  #end
  ## ---------------
  ## Wikis macros
  ## ---------------
  #macro(wikinamesoption $wikiname $wikinamelist)
    &lt;option value="$wikiname" #if($wikinamelist.contains($wikiname))selected="selected"#end&gt;$wikiname&lt;/option&gt;
  #end
  #macro(wikinamesselect $allwikinamelist $wikinamelist)
    &lt;select name="wikinames"&gt;
      &lt;option value="" selected="selected"&gt;All&lt;/option&gt;
      #foreach($wikiname in $allwikinamelist)
        #wikinamesoption($wikiname $wikinamelist)
      #end
    &lt;/select&gt;
  #end
#else
  #if($wikinames == "")
    #set($wikinames = $context.mainWikiName)
  #end
#end
## ---------------
## Query preparation
## ---------------
#set($text = "$!request.getParameter('text')")
#set($query = $text)
#set($utext = $util.encodeURI($query))
#set($itemsPerPage = "30")
## ---------------
## RSS link
## ---------------
#if($space == "")
  #set($url = $xwiki.getURL($doc.fullName, 'view', "xpage=rdf&amp;amp;text=${utext}" ))
#else
  #set($url = $xwiki.getURL($doc.fullName, 'view', "xpage=rdf&amp;space=$space&amp;text=${utext}"))
#end
#if ($displayUI)
&lt;div style="float: right;"&gt;
  &lt;a href="$url"&gt;&lt;img src="$xwiki.getSkinFile("icons/black-rss.png")" style="border:0px" alt="rss icon" /&gt;&lt;/a&gt;
&lt;/div&gt;
## ---------------
## Query form
## ---------------
&lt;form action="$doc.name" method="get"&gt;
&lt;div class="centered"&gt;
$msg.get("xe.search.query") &lt;input type="text" name="text" value="$xwiki.getFormEncoded($query)" /&gt; $msg.get("xe.search.in.space") #spaceselect($space $spaces $spacesText)#if($xwiki.isVirtualMode()) $msg.get("xe.search.in.wikis") #wikinamesselect($util.sort($allwikinamelist) $wikinamelist)#end &lt;input type="submit" value="$msg.get("xe.search.go")"/&gt;
&lt;/div&gt;
&lt;/form&gt;
#end
{/pre}
## ---------------
## Results processing
## ---------------
#if($query != '')
	#set($lucene = $xwiki.getPlugin("lucene"))
	#if($lucene)
                ## ---------------
                ## Lucene search
                ## ---------------
		#set($languages = "default,en,de")
		#set($firstIndex = $request.getParameter("firstIndex"))
		#if(!$firstIndex)
			#set($firstIndex = "1")
		#end
		#set($searchresults = $lucene.getSearchResults("${query}$!{reqspace}", $wikinames, $languages, $xwiki))
                #set($results = $searchresults.getResults($firstIndex,$itemsPerPage))
		#if($searchresults.getHitcount()&gt;0)
                        ## -----------------
                        ## Results numbers
                        ## -----------------
                        #set($lastIndex=$searchresults.getEndIndex($firstIndex, $itemsPerPage))
                        #if ($displayUI)
			#if($searchresults.getHitcount()==1)
				$msg.get("xe.search.results.one")
			#else
				$msg.get("xe.search.results") $firstIndex - $lastIndex $msg.get("xe.search.of") ${searchresults.getHitcount()}:
			#end
                        #end
                        ## ---------------
                        ## Previous page
                        ## ---------------
			#if($searchresults.hasPrevious($firstIndex) &amp;&amp; $displayUI)
				#set($linkfirstIndex = $searchresults.getPreviousIndex($firstIndex,$itemsPerPage))
				#set($link = "${doc.name}?text=${query}&amp;firstIndex=${linkfirstIndex}")
                                {pre}
				&lt;a href="$link"&gt;&lt;img src="${xwiki.getSkinFile("icons/silk/resultset_previous.gif")}" alt="$msg.get('xe.search.page.previous')" /&gt;$msg.get("xe.search.page.previous")&lt;/a&gt;
				{/pre}
			#end
                        ## -------------
                        ## Next page
                        ## -------------
			#if($searchresults.hasNext($firstIndex,$itemsPerPage) &amp;&amp; $displayUI)
				#set($linkfirstIndex = $searchresults.getNextIndex($firstIndex,$itemsPerPage))
				#set($link = "${doc.name}?text=${query}&amp;firstIndex=${linkfirstIndex}")
                                {pre}
				&lt;a href="$link"&gt;&lt;img src="${xwiki.getSkinFile("icons/silk/resultset_next.gif")}" alt="$msg.get('xe.search.page.next')" /&gt;$msg.get("xe.search.page.next")&lt;/a&gt;
                                {/pre}
			#end
                        ## -----------------
                        ## Display results
                        ## -----------------
                        #if ("$!request.xpage" == 'rdf')
                          #set ($baseurl = "http://${request.serverName}")
                          #set ($descText = $msg.get("xe.search.rss.feedfor"))
                          #set ($description = "$descText '$text'")
                          #set ($list = $util.arrayList)
                          #foreach ($item in $results)
                            #if ($item.type != "attachment")
                              #set ($ok = $list.add(0, "${item.web}.${item.name}"))
                            #end
                          #end
                          #set ($ok = $response.setContentType("text/xml"))
                          #includeInContext("XWiki.WebRssCode")
                        #else
                          #set ($list = $results)
                          #set ($isScored = true)
                          #includeInContext("XWiki.Results")
                        #end
                #end
	#else
		#error($msg.get("xe.search.plugin.notfound"))
	#end
#end
#if ($displayUI)
  {pre}
  ## ---------------
  ## Rebuild processing
  ## ---------------
  #set($lucene = $xwiki.getPlugin("lucene"))
  #if($lucene)
    #set($doRebuild = "$!{request.getParameter('rebuild')}")
    #if($doRebuild == "yes")
      #set($documentCount = $lucene.rebuildIndex())
      #if(${documentCount} &gt;= 0)
        {/pre}#info($msg.get("xe.search.rebuild.started")){pre}
      #elseif(${documentCount} == -1)
        #error($msg.get("xe.search.rebuild.rights"))
      #elseif(${documentCount} == -2)
        #error($msg.get("xe.search.rebuild.inprogress"))
      #else
        #error($msg.get("xe.search.rebuild.failed"))
      #end
    #else ## !doRebuild
      ## ---------------
      ## Queue &amp; rebuild option
      ## ---------------
      #set ($queuesize = $xwiki.lucene.getQueueSize())
      #if ($queuesize &gt; 2)
        #set($info1 = $msg.get('xe.search.rebuild.currently', [${queuesize}]))
      #else
        #set($info1 = $msg.get('xe.search.index.uptodate'))
      #end
      #if($hasAdmin)
        #set($info2 = " [$msg.get('xe.search.index.rebuild')&gt;${doc.space}.${doc.name}?rebuild=yes].")
      #else
        #set($info2 = "")
	  #end
      {/pre}#info("${info1}${info2}"){pre}
    #end ## doRebuild
    ## ---------------
    ## Comment
    ## ---------------
    {/pre}
   #set($defaultSearch = "[$msg.get('xe.search.default.engine')&gt;WebSearch?text=$utext]") 
   #warning($msg.get("xe.search.lucene.experimental", [$defaultSearch]))
  #else ## !lucene exists
  #set($defaultSearch = "[$msg.get('xe.search.default.engine')&gt;WebSearch?text=$utext]")
    #warning($msg.get("xe.search.plugin.notenabled", [$defaultSearch]))
  #end ## lucene exists
#end ## displayUI
</content></xwikidoc>