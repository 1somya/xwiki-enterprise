<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>XWiki</web>
<name>LiveTableResultsMacros</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>XWiki.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1252454400000</creationDate>
<date>1267453085000</date>
<contentUpdateDate>1267453085000</contentUpdateDate>
<version>1.1</version>
<title>$msg.get("xe.livetable.resultsmacros")</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<content>{{velocity output="false"}}
#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresult $className $collist)
  #gridresultwithfilter($className $collist '' '')
#end



#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresultwithfilter $className $collist $filterfrom $filterwhere)
  #if("$!{request.xpage}" == 'plain')
    $response.setContentType('application/json')
  #end
  #set($offset = $util.parseInt($request.get('offset')))
  ## offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if($offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $util.parseInt($request.get('limit')))
  #set($tablelist = $util.arrayList)


  ##
  ## Compute the query to use for retrieving data
  ##
  #set($whereSql = '')
  #set($fromSql = '')
  #set($class = $xwiki.getDocument($className).getxWikiClass())

  ## Exclude Blacklisted spaces ($blacklistedSpaces is set in xwikivars.vm)
  ##
  #if($blacklistedSpaces.size() &gt; 0)
    #set($whereSql = "${whereSql} and doc.space not in (")
    #foreach ($blacklistedSpace in $blacklistedSpaces)
      #if($velocityCount &gt; 1)#set ($whereSql = "${whereSql},")#end
      #set ($whereSql = "${whereSql}'$blacklistedSpace'")
    #end
    #set($whereSql = "${whereSql})")
  #end

  ## Add the columns needed for the actual data
  ##
  #foreach($colname in $collist)
    #livetable_addColumnToQuery($colname)
  #end

  ## Tag filtering
  ##
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #set($tag = $util.decodeURI($tag))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      #set($whereSql = "${whereSql} '$tag' in elements(tagprop.list)")
    #end
    #set($whereSql = "${whereSql})")
  #end

  ##
  ## Order
  ##
  #set($order = "$!request.sort")
  #if($order != '')
    #set($orderDirection = "$!request.dir")
    #if($order == 'description')
      #set($tableAlias = 'dtable')
    #else
      #set($tableAlias = $order)
    #end
    #if($order.startsWith('doc.'))
      #set($orderSql = " order by ${tableAlias.replace('_','.')} ${orderDirection}")
    #elseif($tablelist.contains($tableAlias))
      #set($orderSql = " order by ${tableAlias}.value ${orderDirection}")
    #elseif($order == 'averagevote')
      #livetable_getTableName($order)
      #set($fromSql = "${fromSql}, BaseObject as objratings, ${tableName} ${tableAlias}")
      #set($whereSql = "${whereSql} and doc.fullName=objratings.name and objratings.className='XWiki.AverageRatingsClass' and objratings.id=${tableAlias}.id.id and ${tableAlias}.name='${order}'")
      #set($orderSql = " order by ${tableAlias}.value ${orderDirection}")
    #else
      #set($multiselect = $class.get($order).getProperty('multiSelect').getValue())
      #if("$multiselect" != '1')
        #livetable_getTableName($order)
        #set($fromSql = "${fromSql}, ${tableName} ${tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.name='${order}'")
        #set($orderSql = " order by ${tableAlias}.value ${orderDirection}")
      #end
    #end
  #end

  ##
  ## Compute the final queries
  ##
  #if("$!className" != '')
    ## Class query
    #set($countSql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' $!whereSql $!filterwhere")
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' $!whereSql $!filterwhere")
    #set($allMatchingTagsFrom = ", BaseObject as obj $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' $!filterwhere")
  #else
    ## Document query
    #set($countSql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
  #end

  ## TagCould matching the current filters
  #set($tagsMatchingFilters = $xwiki.tag.getTagCountForQuery($tagsMatchingFiltersFrom, $tagsMatchingFiltersWhere))
  ## TagCloud matching all the documents used by the livetable
  #set($allMatchingTags = $xwiki.tag.getTagCountForQuery($allMatchingTagsFrom, $allMatchingTagsWhere))
  #set($sql = "$countSql $!{orderSql}")
  #set($items = $xwiki.searchDocuments($sql, $limit, $offset))
  #set($totalItems = $xwiki.countDocuments($countSql))
  #set($returnedItems = $items.size())


  ## ==============================================
  ## json starts
  ## ==============================================
{
  #if("$!request.sql" == '1')
    "sql": $sql,
    "countsql": $countSql,
  #end
  "totalrows": $totalItems,
  "matchingtags": {
  #foreach($tag in $tagsMatchingFilters.keySet())
    #if($velocityCount &gt; 1) , #end
    #set($t=$tag.replaceAll('"','\\"'))
    "$t": {}
  #end
  },
  "tags" : [
  #foreach($tag in $allMatchingTags.keySet())
    #if($velocityCount &gt; 1) , #end
    {"tag": "$tag.replaceAll("\"", "\\"")", "count": $allMatchingTags.get($tag)}
  #end
  ],
  "returnedrows": #if($returnedItems &lt; $limit) $returnedItems #else $limit #end,
  "offset": $mathtool.add($offset, 1),
  "reqNo": $request.reqNo,
  "rows": [
    #foreach($item in $items)
     #set($viewable = $xwiki.hasAccessLevel('view', $context.user, "${context.database}:${item}"))
     #if($velocityCount &gt; 1) , #end
     {
      "doc_viewable" : $viewable,
      #if(!$viewable)
        "doc_fullname" : "${context.database}:${item}"
      #else
        #set($itemDoc = $xwiki.getDocument($item))
        #set($fullname = "${itemDoc.wiki}:${itemDoc.space}.${itemDoc.name}")
        #set($ok = $itemDoc.use($className))
        #set($itemUrl = $xwiki.getURL($item))
        #set($spaceUrl = $xwiki.getURL("${itemDoc.wiki}:${itemDoc.space}.WebHome"))
        #if($xwiki.isVirtualMode())
          #set($wiki = $itemDoc.wiki)
          #set($wikiUrl = $xwiki.getURL("${itemDoc.wiki}:Main.WebHome"))
        #end
        #set($editUrl = $itemDoc.getURL($itemDoc.defaultEditMode))
        #set($copyUrl = $xwiki.getURL('XWiki.CopyDocument', 'view', "sourcedoc=${util.encodeURI($fullname)}"))
        #set($deleteUrl = $itemDoc.getURL('delete'))
        #set($renameUrl = $itemDoc.getURL('view', 'xpage=rename&amp;amp;step=1'))
        #set($rightsUrl = $itemDoc.getURL('edit', 'editor=rights'))
        "doc_name" : "$itemDoc.name",
        "doc_fullname" : "$fullname",
        "doc_space" : "${itemDoc.space}",
        "doc_url" : "${itemUrl}",
        "doc_space_url" : "${spaceUrl}",
        #if($xwiki.isVirtualMode())
          "doc_wiki" : "$wiki",
          "doc_wiki_url" : "$wikiUrl",
        #end
        "doc_hasadmin"  : $xwiki.hasAdminRights(),
        "doc_edit_url" : "$editUrl",
        "doc_copy_url"   : "$copyUrl",
        "doc_delete_url" : "$deleteUrl",
        "doc_rename_url" : "$renameUrl",
        "doc_rights_url" : "$rightsUrl",
        "doc_author_url" : "$xwiki.getURL($itemDoc.author)",
        "doc_date" : "${xwiki.formatDate($itemDoc.date)}",
        "doc_title" : "$xwiki.getXMLEncoded(${itemDoc.getDisplayTitle()})",
        "doc_author" : "${xwiki.getLocalUserName($itemDoc.author, false)}",
        "doc_creationDate" : "${xwiki.formatDate($itemDoc.creationDate)}",
        "doc_creator" : "${xwiki.getLocalUserName($itemDoc.creator, false)}"
        #foreach($colname in $collist)
          #if($colname.startsWith('doc.'))
          #elseif($colname == '_action') ,
            #set($text = $msg.get("${request.transprefix}actiontext"))
           "${colname}" : "${text}"
          #elseif($colname == '_attachments') ,
            #livetable_getAttachmentsList($itemDoc)
            "${colname}" : "${attachlist}"
          #elseif($colname == '_avatar') ,
            #livetable_getAvatar($itemDoc)
            "${colname}" : "${avatar}"
          #elseif($colname == '_images') ,
            #livetable_getImagesList($itemDoc)
            "${colname}" : "${imagesList}"
          #else ,
            #set($propClassName = "$!{request.get(${colname.concat('_class')})}")
            #if($propClassName != '')
              #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
              #set($ok = $itemDoc.use($propClassName))
            #else
              #set($propClass = $class)
            #end
            ## Retrieve the property type as it might be usefull
            #set($propType = '')
            #if($listtool.contains($propClass.getPropertyNames(), $colname))
              #set($propType = "$!{propClass.get($colname).type}")
            #end
            #set($fieldValue = "$!itemDoc.getValue($colname)")
            #set($fieldDisplayValue = "$!itemDoc.display($colname, 'view')")
            ## we need to transform carriage returns to &lt;br /&gt;
            #if($propType == 'TextAreaClass')
              #set($fieldValue = $fieldValue.replaceAll('\r', '').replaceAll('\n', '&lt;br /&gt;'))
              #set($fieldDisplayValue = $fieldDisplayValue.replaceAll('\r', '').replaceAll('\n','&lt;br /&gt;'))
            #else
              #set($fieldValue = $fieldValue.replaceAll('\r|\n', ''))
              #set($fieldDisplayValue = $fieldDisplayValue.replaceAll('\r|\n', ''))
            #end
            #if($fieldDisplayValue == '')
              #set($fieldDisplayValue = $msg.get("${request.transprefix}emptyvalue"))
            #end
            #set($fieldUrl = '')
            ## only retrieve an URL for a DBListClass item
            #if($propType == 'DBListClass')
              #set($fieldUrl = $xwiki.getDocument($fieldValue).getURL())
              #if($fieldUrl == $xwiki.getURL('Main.WebHome'))
                #set($fieldUrl = '')
              #end
            #end
            "${colname}" : "${fieldDisplayValue}",
            "${colname}_value" : "${fieldValue}",
            "${colname}_url" : "${fieldUrl}"
            ## reset to the default class
            #set($ok = $itemDoc.use($className))
          #end
        #end
      #end
     }
    #end
  ]}
## ==============================================
## json ended
## ==============================================
#end


#**
 * Get the name of the Property that should be used for a given livetable column.
 *#
#macro(livetable_getTableName $colname)
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #set($propType = '')
  #if($listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  #if($propType == 'NumberClass')
    #set($numberType = $propClass.get($colname).getProperty('numberType').getValue())
    #if($numberType == 'integer')
      #set($tableName = 'IntegerProperty')
    #elseif($numberType == 'float')
      #set($tableName = 'FloatProperty')
    #elseif($numberType == 'double')
      #set($tableName = 'DoubleProperty')
    #else
      #set($tableName = 'LongProperty')
    #end
  #elseif($propType == 'BooleanClass')
    #set($tableName = 'IntegerProperty')
  #elseif($propType == 'DateClass')
    #set($tableName = 'DateProperty')
  #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
    #set($tableName = 'LargeStringProperty')
  #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass')
    #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
    #if($multiSelect == 1)
      #set($tableName = 'DBStringListProperty')
    #else
      #set($tableName = 'StringProperty')
    #end
  #else
    #set($tableName = 'StringProperty')
  #end
#end

#**
 * Old alias of the #livetable_getTableName macro.
 * @deprecated since 2.2.3, use {@link #livetable_getTableName}
 *#
#macro(grid_gettablename $colname)
  #livetable_getTableName($colname)
#end



#**
 * List attachments for a document, putting the result as HTML markup in the $attachlist variable.
 *#
#macro(livetable_getAttachmentsList $itemDoc)
  #set($attachlist = '')
  #foreach($attachment in $itemDoc.attachmentList)
    #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
    #set($attachlist = "${attachlist}&lt;a href='${attachmentUrl}'&gt;$attachment.filename&lt;/a&gt;&lt;br/&gt;")
  #end
#end

#**
 * Old alias of the #livetable_getAttachmentsList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAttachmentsList}
 *#
#macro(grid_attachlist $itemDoc)
  #livetable_getAttachmentsList($itemDoc)
#end



#**
 * List image attachments for a document, putting the result as HTML markup in the $imagesList variable.
 *#
#macro(livetable_getImagesList $itemDoc)
  #set($imagesList = '')
  #foreach ($attachment in $itemDoc.attachmentList)
    #if($attachment.isImage())
      #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
      #set($imagesList = "${imagesList}&lt;img src='${attachmentUrl}' width='50'/&gt;&lt;br/&gt;")
    #end
  #end
#end

#**
 * Old alias of the #livetable_getImagesList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getImagesList}
 *#
#macro(grid_photolist $itemDoc)
  #livetable_getImagesList($itemDoc)
#end


#**
 * Generate the HTML code for a user avatar, with a fixed 50px width.
 *#
#macro(livetable_getAvatar $itemDoc)
  #set($avatar = "#useravatar($itemDoc.fullName)")
  #set($avatar = $avatar.replaceAll('\r|\n', '').replaceAll(' alt=', ' width="50" alt='))
#end

#**
 * Old alias of the #livetable_getAvatar macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAvatar}
 *#
#macro(grid_avatar $itemDoc)
  #livetable_getAvatar($itemDoc)
#end



#**
 * Macro to extend the query to select the properties for the livetable columns.
 *#
#macro(livetable_addColumnToQuery $colname)
  #set($filterValue = "$!{request.get($colname)}")
  #if($colname == 'description')
    #set($tableAlias = 'dtable')
  #else
    #set($tableAlias = $colname)
  #end
  #set($propType = '')
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #if($propClass &amp;&amp; $listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  ##
  ## Filter values
  #if("$!filterValue" != '')
    #set($ok = $tablelist.add($tableAlias))
    #if($colname.startsWith('doc.'))
      #set($whereSql = "${whereSql} and upper(str(${colname.replace('_','.')})) like upper('%${filterValue}%')")
    #elseif($propType == 'NumberClass' || $propType == 'BooleanClass')
      #livetable_getTableName($colname)
      #set($fromSql = "${fromSql}, ${tableName} ${tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${colname}' and ${tableAlias}.value = ${filterValue}")
    #elseif($propType == 'DateClass')
      #set($fromSql = "${fromSql}, DateProperty ${tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${colname}' and upper(str(${tableAlias}.value)) like upper('%${filterValue}%')")
    #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
      #set($fromSql = "${fromSql}, LargeStringProperty ${tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${colname}' and upper(${tableAlias}.value) like upper('%${filterValue}%')")
    #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass')
      #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
      #if($multiSelect == 1)
        #set($fromSql = "${fromSql}, DBStringListProperty ${tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${colname}' and '${filterValue}' in elements(${tableAlias}.list)")
      #else
        #set($fromSql = "${fromSql}, StringProperty ${tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${colname}' and ${tableAlias}.value = '${filterValue}'")
      #end
    #else
      #set($fromSql = "${fromSql}, StringProperty ${tableAlias}")
      #set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${colname}' and upper(${tableAlias}.value) like upper('%${filterValue}%')")
    #end
  #end
#end

#**
 * Old alias of the #livetable_addColumnToQuery macro.
 * @deprecated since 2.2.3, use {@link #livetable_addColumnToQuery}
 *#
#macro(grid_addcolumn $colname)
  #livetable_addColumnToQuery($colname)
#end

{{/velocity}}</content>
</xwikidoc>
