/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package com.xpn.xwiki.it;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.httpclient.Credentials;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.GetMethod;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.w3c.css.css.DocumentParser;
import org.w3c.css.css.StyleReport;
import org.w3c.css.css.StyleReportFactory;
import org.w3c.css.css.StyleSheet;
import org.w3c.css.util.ApplContext;
import org.w3c.css.util.HTTPURL;

import com.xpn.xwiki.it.xhtml.XHTMLError;
import com.xpn.xwiki.it.xhtml.XHTMLValidator;
import com.xpn.xwiki.plugin.packaging.Package;

/**
 * Verifies that all pages in the default wiki are valid XHTML documents.
 * 
 * @version $Id$
 */
public class XhtmlValidityTest extends TestCase
{
    private String fullPageName;

    /**
     * We save the stdout stream since we replace it with our own in order to verify that XWiki doesn't generated any
     * error while validating documents and we fail the build if it does.
     */
    private PrintStream stdout;

    /**
     * The new stdout stream we're using to replace the default console output.
     */
    private ByteArrayOutputStream out;

    /**
     * We save the stderr stream since we replace it with our own in order to verify that XWiki doesn't generated any
     * error while validating documents and we fail the build if it does.
     */
    private PrintStream stderr;

    private HttpClient client;

    private XHTMLValidator validator;

    /**
     * The new stderr stream we're using to replace the default console output.
     */
    private ByteArrayOutputStream err;

    public XhtmlValidityTest(String fullPageName, HttpClient client, XHTMLValidator validator)
    {
        super("testValidityOfDocument");

        this.fullPageName = fullPageName;
        this.client = client;
        this.validator = validator;
    }

    public static Test suite() throws Exception
    {
        TestSuite suite = new TestSuite();

        String path = System.getProperty("localRepository") + "/" + System.getProperty("pathToXWikiXar");

        String patternFilter = System.getProperty("documentsToTest");

        XHTMLValidator validator = new XHTMLValidator();
        HttpClient client = new HttpClient();

        Credentials defaultcreds = new UsernamePasswordCredentials("Admin", "admin");
        client.getState().setCredentials(AuthScope.ANY, defaultcreds);

        for (String pageName : readXarContents(path, patternFilter)) {
            suite.addTest(new XhtmlValidityTest(pageName, client, validator));
        }

        return suite;
    }

    /**
     * {@inheritDoc}
     * 
     * @see junit.framework.TestCase#getName()
     */
    public String getName()
    {
        return "Validating " + fullPageName;
    }

    /**
     * {@inheritDoc}
     * 
     * @see junit.framework.TestCase#setUp()
     */
    protected void setUp() throws Exception
    {
        super.setUp();

        // TODO Until we find a way to incrementally display the result of tests this stays
        System.out.println(getName());

        // We redirect the stdout and the stderr in order to detect (server-side) error/warning
        // messages like the ones generated by the velocity parser
        this.stdout = System.out;
        this.out = new ByteArrayOutputStream();
        System.setOut(new PrintStream(this.out));
        this.stderr = System.err;
        this.err = new ByteArrayOutputStream();
        System.setErr(new PrintStream(this.err));
    }

    /**
     * {@inheritDoc}
     * 
     * @see junit.framework.TestCase#tearDown()
     */
    protected void tearDown() throws Exception
    {
        // Restore original stdout and stderr streams.
        String output = this.out.toString();
        String errput = this.err.toString();

        System.setOut(this.stdout);
        System.out.print(output);
        System.setErr(this.stderr);
        System.err.print(errput);

        // Detect server-side error/warning messages from the stdout
        assertFalse("Errors found in the stdout output", hasErrors(output));
        assertFalse("Warnings found in the stdout output", hasWarnings(output));

        // Detect server-side error/warning messages from the stderr
        assertFalse("Errors found in the stderr output", hasErrors(errput));
        assertFalse("Warnings found in the stderr output", hasWarnings(errput));

        super.tearDown();
    }

    public void testValidityOfDocument() throws Exception
    {
        GetMethod method =
            new GetMethod("http://127.0.0.1:8080/xwiki/bin/view/"
                + URLEncoder.encode(this.fullPageName, "UTF-8").replace('.', '/'));

        method.setDoAuthentication(true);
        method.setFollowRedirects(true);
        method.addRequestHeader("Authorization", "Basic " + new String(Base64.encodeBase64("Admin:admin".getBytes())));

        byte[] responseBody;

        // Execute the method.
        try {
            int statusCode = this.client.executeMethod(method);

            assertEquals("Method failed: " + method.getStatusLine(), HttpStatus.SC_OK, statusCode);

            // Read the response body.
            responseBody = method.getResponseBody();
        } finally {
            method.releaseConnection();
        }

        this.validator.validate(new ByteArrayInputStream(responseBody));
        List<XHTMLError> errors = this.validator.getErrors();

        boolean hasError = false;
        for (XHTMLError error : errors) {
            if (error.getType() == XHTMLError.Type.WARNING) {
                System.out.println("Warning at " + error.getLine() + ":" + error.getColumn() + " " + error.getMessage());
            } else {
                System.err.println("Line " + error.getLine() + ", Column " + error.getColumn() + " "
                    + error.getMessage());

                hasError = true;
            }
        }

        if (hasError) {
            System.err.println("");
            System.err.println("Validated content:");
            BufferedReader reader = new BufferedReader(new StringReader(new String(responseBody)));
            int index = 1;
            for (String line = reader.readLine(); line != null; line = reader.readLine(), ++index) {
                System.err.println(index + "\t" + line);
            }
        }

        assertFalse("Validation errors in " + fullPageName, hasError);
    }

    private boolean hasErrors(String output)
    {
        return output.indexOf("ERROR") >= 0 || output.indexOf("ERR") >= 0;
    }

    private boolean hasWarnings(String output)
    {
        return output.indexOf("WARNING") >= 0 || output.indexOf("WARN") >= 0;
    }

    public static List<String> readXarContents(String fileName, String patternFilter) throws Exception
    {
        FileInputStream fileIS = new FileInputStream(fileName);
        ZipInputStream zipIS = new ZipInputStream(fileIS);

        ZipEntry entry;
        Document tocDoc = null;
        while ((entry = zipIS.getNextEntry()) != null) {
            if (entry.getName().compareTo(Package.DefaultPackageFileName) == 0) {
                SAXReader reader = new SAXReader();
                tocDoc = reader.read(zipIS);
                break;
            }
        }

        if (tocDoc == null) {
            return Collections.emptyList();
        }

        List<String> result = new ArrayList<String>();

        Element filesElement = tocDoc.getRootElement().element("files");
        List<Element> fileElementList = filesElement.elements("file");
        for (Element el : fileElementList) {
            String docFullName = el.getStringValue();

            if (patternFilter == null || docFullName.matches(patternFilter)) {
                result.add(docFullName);
            }
        }

        return result;
    }

    private static int assertCssValid(String url) throws Exception
    {
        ApplContext ac = new ApplContext("en");
        ac.setProfile("css21");
        ac.setCssVersion("css21");
        ac.setMedium("all");
        ac.setCredential("Basic " + new String(Base64.encodeBase64("Admin:admin".getBytes())));
        String output = "text";
        int warningLevel = 2;

        String encoding = ac.getMsg().getString("output-encoding-name");
        PrintWriter out;
        if (encoding != null) {
            out = new PrintWriter(new OutputStreamWriter(System.out, encoding));
        } else {
            out = new PrintWriter(new OutputStreamWriter(System.out));
        }
        String uri = HTTPURL.getURL(url).toString();
        DocumentParser URLparser = new DocumentParser(ac, uri);

        StyleSheet styleSheet = URLparser.getStyleSheet();
        if (styleSheet == null) {
            throw new IOException(ac.getMsg().getServletString("process") + " " + uri);
        }

        styleSheet.findConflicts(ac); // this is bogus ?

        StyleReport style = StyleReportFactory.getStyleReport(ac, uri, styleSheet, output, warningLevel);

        int errors = styleSheet.getErrors().getErrorCount();
        if (errors > 0) {
            style.print(out);
        }

        return errors;
    }
}
