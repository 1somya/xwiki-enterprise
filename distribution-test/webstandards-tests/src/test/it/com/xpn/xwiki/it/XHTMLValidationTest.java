/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package com.xpn.xwiki.it;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.net.URLEncoder;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.xwiki.validator.ValidationError;
import org.xwiki.validator.Validator;
import org.xwiki.validator.XHTMLValidator;

import com.xpn.xwiki.it.framework.AbstractValidationTest;

/**
 * Verifies that all pages in the default wiki are valid XHTML documents.
 * 
 * @version $Id$
 */
public class XHTMLValidationTest extends AbstractValidationTest
{ 
    private XHTMLValidator validator = new XHTMLValidator();
        
    public XHTMLValidationTest(String fullPageName, HttpClient client, Validator validator) throws Exception
    {
        super("testDocumentValidity");

        this.validator = (XHTMLValidator) validator; 
        
        this.fullPageName = fullPageName;
        this.client = client;
    }

    /**
     * {@inheritDoc}
     * 
     * @see junit.framework.TestCase#getName()
     */
    public String getName()
    {
        return "Validating XHTML validity for: " + fullPageName;
    }

    /**
     * {@inheritDoc}
     * 
     * @see junit.framework.TestCase#setUp()
     */
    protected void setUp() throws Exception
    {
        super.setUp();

        // TODO Until we find a way to incrementally display the result of tests this stays
        System.out.println(getName());

        // We redirect the stdout and the stderr in order to detect (server-side) error/warning
        // messages like the ones generated by the velocity parser
        this.stdout = System.out;
        this.out = new ByteArrayOutputStream();
        System.setOut(new PrintStream(this.out));
        this.stderr = System.err;
        this.err = new ByteArrayOutputStream();
        System.setErr(new PrintStream(this.err));
    }

    /**
     * {@inheritDoc}
     * 
     * @see junit.framework.TestCase#tearDown()
     */
    protected void tearDown() throws Exception
    {
        // Restore original stdout and stderr streams.
        String output = this.out.toString();
        String errput = this.err.toString();

        System.setOut(this.stdout);
        System.out.print(output);
        System.setErr(this.stderr);
        System.err.print(errput);

        // Detect server-side error/warning messages from the stdout
        assertFalse("Errors found in the stdout output", hasErrors(output));
        assertFalse("Warnings found in the stdout output", hasWarnings(output));

        // Detect server-side error/warning messages from the stderr
        assertFalse("Errors found in the stderr output", hasErrors(errput));
        assertFalse("Warnings found in the stderr output", hasWarnings(errput));

        super.tearDown();
    }

    public void testDocumentValidity() throws Exception
    {
        GetMethod method =
            new GetMethod("http://127.0.0.1:8080/xwiki/bin/view/"
                + URLEncoder.encode(this.fullPageName, "UTF-8").replace('.', '/'));

        method.setDoAuthentication(true);
        method.setFollowRedirects(true);
        method.addRequestHeader("Authorization", "Basic " + new String(Base64.encodeBase64("Admin:admin".getBytes())));

        byte[] responseBody;

        // Execute the method.
        try {
            int statusCode = this.client.executeMethod(method);

            assertEquals("Method failed: " + method.getStatusLine(), HttpStatus.SC_OK, statusCode);

            // Read the response body.
            responseBody = method.getResponseBody();
        } finally {
            method.releaseConnection();
        }

        validator.setDocument(new ByteArrayInputStream(responseBody));
        List<ValidationError> errors = validator.validate();

        boolean hasError = false;
        for (ValidationError error : errors) {
            if (error.getType() == ValidationError.Type.WARNING) {
                System.out.println("Warning at " + error.getLine() + ":" + error.getColumn() + " " + error.getMessage());
            } else {
                System.err.println("Line " + error.getLine() + ", Column " + error.getColumn() + " "
                    + error.getMessage());

                hasError = true;
            }
        }

        if (hasError) {
            System.err.println("");
            System.err.println("Validated content:");
            BufferedReader reader = new BufferedReader(new StringReader(new String(responseBody)));
            int index = 1;
            for (String line = reader.readLine(); line != null; line = reader.readLine(), ++index) {
                System.err.println(index + "\t" + line);
            }
        }

        assertFalse("Validation errors in " + fullPageName, hasError);
    }
}
